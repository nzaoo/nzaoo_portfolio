import React, { useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { Environment } from '@react-three/drei';
import Character from './Character';
import InteractiveObject from './InteractiveObject';
import Room from './Room';
import CameraController from './CameraController';
import UIOverlay from './UIOverlay';
import { Position, InteractiveContent, InteractiveObject as InteractiveObjectType } from '../data/types';

// Th√™m icon emoji cho t·ª´ng object
const objectIcons: Record<string, string> = {
  about: 'üë§',
  projects: 'üíª',
  blog: 'üìö',
  contact: 'üö™',
  lab: 'üî¨',
};

const Portfolio3D: React.FC = () => {
  const [characterPosition, setCharacterPosition] = useState<Position>({ x: 0, y: 0, z: 0 });
  const [activeInteraction, setActiveInteraction] = useState<InteractiveContent | null>(null);

  // B·ªë tr√≠ l·∫°i c√°c object trong ph√≤ng
  const interactiveObjects: InteractiveObjectType[] = [
    {
      id: 'about',
      position: [0, 0.5, 0], // Gi·ªØa ph√≤ng
      label: 'Gi·ªõi thi·ªáu',
      content: {
        title: 'V·ªÅ t√¥i',
        content: 'Xin ch√†o! T√¥i l√† m·ªôt l·∫≠p tr√¨nh vi√™n ƒëam m√™, ƒëang tr√™n h√†nh tr√¨nh t·ª´ beginner ƒë·∫øn full-stack developer. T√¥i th√≠ch h·ªçc h·ªèi c√¥ng ngh·ªá m·ªõi v√† t·∫°o ra nh·ªØng s·∫£n ph·∫©m c√≥ √≠ch.'
      }
    },
    {
      id: 'projects',
      position: [3, 0.5, -2], // B√†n m√°y t√≠nh
      label: 'D·ª± √°n',
      content: {
        title: 'D·ª± √°n c·ªßa t√¥i',
        content: 'ƒê√¢y l√† n∆°i t√¥i tr∆∞ng b√†y c√°c d·ª± √°n ƒë√£ th·ª±c hi·ªán, t·ª´ nh·ªØng website ƒë∆°n gi·∫£n ƒë·∫øn c√°c ·ª©ng d·ª•ng ph·ª©c t·∫°p. M·ªói d·ª± √°n ƒë·ªÅu l√† m·ªôt b∆∞·ªõc ti·∫øn trong h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa t√¥i.'
      }
    },
    {
      id: 'blog',
      position: [-3, 0.5, -2], // Gi√° s√°ch
      label: 'Blog',
      content: {
        title: 'Blog & Nh·∫≠t k√Ω h·ªçc t·∫≠p',
        content: 'Chia s·∫ª ki·∫øn th·ª©c, kinh nghi·ªám v√† h√†nh tr√¨nh h·ªçc t·∫≠p l·∫≠p tr√¨nh, c√¥ng ngh·ªá.'
      }
    },
    {
      id: 'contact',
      position: [0, 0.5, 4], // C·ª≠a ra
      label: 'Li√™n h·ªá & CV',
      content: {
        title: 'Li√™n h·ªá & T·∫£i CV',
        content: 'Email: your.email@example.com\nGitHub: github.com/yourusername\nLinkedIn: linkedin.com/in/yourprofile\nT·∫£i CV t·∫°i ƒë√¢y.'
      }
    },
    {
      id: 'lab',
      position: [0, 0.5, -4], // B√†n lab
      label: 'Playground',
      content: {
        title: 'Playground - Th·ª≠ nghi·ªám code',
        content: 'N∆°i th·ª≠ nghi·ªám c√°c √Ω t∆∞·ªüng, demo nh·ªè, hi·ªáu ·ª©ng, animation, v.v.'
      }
    },
  ];

  // T√≠nh kho·∫£ng c√°ch ƒë·ªÉ hi·ªÉn th·ªã hi·ªáu ·ª©ng near
  const getDistance = (pos1: Position, pos2: { x: number; z: number }) => {
    return Math.sqrt(
      Math.pow(pos1.x - pos2.x, 2) + 
      Math.pow(pos1.z - pos2.z, 2)
    );
  };

  const handleInteraction = (content: InteractiveContent) => {
    setActiveInteraction(content);
  };

  return (
    <div className="w-full h-screen bg-gradient-to-b from-blue-900 to-purple-900 relative">
      {/* Canvas 3D */}
      <Canvas
        camera={{ position: [0, 3, 7], fov: 75 }}
        style={{ width: '100%', height: '100%' }}
      >
        <ambientLight intensity={0.5} />
        <directionalLight position={[10, 10, 5]} intensity={1} />
        
        <Room />
        
        <Character 
          position={characterPosition}
          onPositionChange={setCharacterPosition}
        />
        
        {interactiveObjects.map((obj) => (
          <InteractiveObject
            key={obj.id}
            position={obj.position}
            label={objectIcons[obj.id] + ' ' + obj.label}
            onInteract={() => handleInteraction(obj.content)}
            isNear={getDistance(characterPosition, { x: obj.position[0], z: obj.position[2] }) < 1.5}
          />
        ))}
        
        <CameraController characterPosition={characterPosition} />
        
        <Environment preset="sunset" />
      </Canvas>

      {/* Instructions */}
      <div className="absolute top-4 left-4 bg-black bg-opacity-50 text-white p-4 rounded-lg shadow-lg backdrop-blur-md">
        <h3 className="font-bold mb-2 text-lg flex items-center gap-2">H∆∞·ªõng d·∫´n <span>üéÆ</span></h3>
        <p className="text-sm">‚Ä¢ <b>WASD</b>: Di chuy·ªÉn nh√¢n v·∫≠t</p>
        <p className="text-sm">‚Ä¢ <b>Enter</b>: T∆∞∆°ng t√°c object</p>
        <p className="text-sm">‚Ä¢ <b>ƒê·∫øn g·∫ßn object</b>: Hi·ªáu ·ª©ng ph√°t s√°ng</p>
      </div>

      {/* Character status */}
      <div className="absolute top-4 right-4 bg-black bg-opacity-50 text-white p-4 rounded-lg shadow-lg backdrop-blur-md">
        <h3 className="font-bold mb-2 text-lg">V·ªã tr√≠ nh√¢n v·∫≠t</h3>
        <p className="text-sm">X: {characterPosition.x.toFixed(2)}</p>
        <p className="text-sm">Z: {characterPosition.z.toFixed(2)}</p>
      </div>

      {/* UI Overlay */}
      <UIOverlay 
        activeInteraction={activeInteraction}
        onClose={() => setActiveInteraction(null)}
      />
    </div>
  );
};

export default Portfolio3D; 